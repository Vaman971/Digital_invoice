{"ast":null,"code":"import * as actionTypes from '../constants/cartConstants';\nconst CART_INITIAL_STATE = {\n  cartItems: []\n};\nexport const cartReducer = (state = CART_INITIAL_STATE, action) => {\n  switch (action.Type) {\n    case actionTypes.ADD_TO_CART:\n      const item = action.payload; // in action.payload we'll get the item we want to add\n\n      const existItem = state.cartItems.find(x => x.product === item.product);\n      // the product will consist of the id and it will check if the payload id is same as the incomming items id , if its there then it'll not add the item to the cart\n\n      if (existItem) {\n        return {\n          ...state,\n          // spreading the state of our cart\n          cartItems: state.cartItems.map(x => x.product === existItem ? item : x)\n        };\n      } else {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, item] // if the cart iten does not exsist then we'll just add that item into the cart\n        };\n      }\n\n    case actionTypes.REMOVE_FROM_CART:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload) // here we are pushing everything to the array except the one we want to delete.\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["actionTypes","CART_INITIAL_STATE","cartItems","cartReducer","state","action","Type","ADD_TO_CART","item","payload","existItem","find","x","product","map","REMOVE_FROM_CART","filter"],"sources":["E:/Myweb/Digital_invoice/client/src/redux/reducers/cartReducer.js"],"sourcesContent":["import * as actionTypes from '../constants/cartConstants';\r\n\r\nconst CART_INITIAL_STATE = {\r\n    cartItems: [],\r\n  };\r\n\r\nexport const cartReducer = (state = CART_INITIAL_STATE,action) =>{\r\n    switch (action.Type) {\r\n        case actionTypes.ADD_TO_CART:\r\n            const item = action.payload; // in action.payload we'll get the item we want to add\r\n\r\n            const existItem = state.cartItems.find((x) => x.product === item.product) \r\n            // the product will consist of the id and it will check if the payload id is same as the incomming items id , if its there then it'll not add the item to the cart\r\n\r\n            if (existItem) {\r\n                return {\r\n                    ...state, // spreading the state of our cart\r\n                    cartItems: state.cartItems.map((x) => x.product === existItem ? item : x),\r\n                };\r\n            }\r\n            else{\r\n                return{\r\n                    ...state,\r\n                    cartItems: [...state.cartItems, item], // if the cart iten does not exsist then we'll just add that item into the cart\r\n                };\r\n            }\r\n        \r\n        case actionTypes.REMOVE_FROM_CART:\r\n            return{\r\n                ...state,\r\n                cartItems: state.cartItems.filter((x)=> x.product !== action.payload), // here we are pushing everything to the array except the one we want to delete.\r\n            };\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,4BAA4B;AAEzD,MAAMC,kBAAkB,GAAG;EACvBC,SAAS,EAAE;AACb,CAAC;AAEH,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGH,kBAAkB,EAACI,MAAM,KAAI;EAC7D,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKN,WAAW,CAACO,WAAW;MACxB,MAAMC,IAAI,GAAGH,MAAM,CAACI,OAAO,CAAC,CAAC;;MAE7B,MAAMC,SAAS,GAAGN,KAAK,CAACF,SAAS,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKL,IAAI,CAACK,OAAO,CAAC;MACzE;;MAEA,IAAIH,SAAS,EAAE;QACX,OAAO;UACH,GAAGN,KAAK;UAAE;UACVF,SAAS,EAAEE,KAAK,CAACF,SAAS,CAACY,GAAG,CAAEF,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKH,SAAS,GAAGF,IAAI,GAAGI,CAAC;QAC5E,CAAC;MACL,CAAC,MACG;QACA,OAAM;UACF,GAAGR,KAAK;UACRF,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAS,EAAEM,IAAI,CAAC,CAAE;QAC3C,CAAC;MACL;;IAEJ,KAAKR,WAAW,CAACe,gBAAgB;MAC7B,OAAM;QACF,GAAGX,KAAK;QACRF,SAAS,EAAEE,KAAK,CAACF,SAAS,CAACc,MAAM,CAAEJ,CAAC,IAAIA,CAAC,CAACC,OAAO,KAAKR,MAAM,CAACI,OAAO,CAAC,CAAE;MAC3E,CAAC;;IAEL;MACI,OAAOL,KAAK;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}